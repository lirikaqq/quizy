import telebot
from telebot import types
from telebot.util import quick_markup
from typing import Dict, List, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = ""
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
QUESTIONS_PER_QUIZ = 5
TOPICS = ["üìú –ò—Å—Ç–æ—Ä–∏—è", "üî¨ –ù–∞—É–∫–∞", "üé¨ –ö–∏–Ω–æ"]

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
QuizQuestion = Dict[str, Any]
QuizTopic = Dict[str, List[QuizQuestion]]
UserData = Dict[str, int | str]

# –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º
QUIZ_DATA: QuizTopic = {
    TOPICS[0]: [
        {
            "question": "<b>–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–∏?</b>",
            "options": ["–ë–æ—Ä–∏—Å –ï–ª—å—Ü–∏–Ω", "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω", "–ú–∏—Ö–∞–∏–ª –ì–æ—Ä–±–∞—á–µ–≤"],
            "answer": "–ë–æ—Ä–∏—Å –ï–ª—å—Ü–∏–Ω",
        },
        {
            "question": "<b>–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?</b>",
            "options": ["1939", "1941", "1945"],
            "answer": "1939",
        },
        {
            "question": "<b>–ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ü–∞—Ä—è –†–æ—Å—Å–∏–∏?</b>",
            "options": ["–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π", "–ü–µ—Ç—Ä I", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä I"],
            "answer": "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π",
        },
        {
            "question": "<b>–ö–æ–≥–¥–∞ —Ä–∞—Å–ø–∞–ª—Å—è –°–°–°–†?</b>",
            "options": ["1991", "1989", "1993"],
            "answer": "1991",
        },
        {
            "question": "<b>–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ö–∞–ø–∏—Ç–∞–ª'?</b>",
            "options": ["–ö–∞—Ä–ª –ú–∞—Ä–∫—Å", "–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ", "–õ–µ–Ω–∏–Ω"],
            "answer": "–ö–∞—Ä–ª –ú–∞—Ä–∫—Å",
        },
    ],
    TOPICS[1]: [
        {
            "question": "<b>–ö–∞–∫–æ–π –≥–∞–∑ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –ó–µ–º–ª–∏?</b>",
            "options": ["–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑"],
            "answer": "–ê–∑–æ—Ç",
        },
        {
            "question": "<b>–°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞?</b>",
            "options": ["118", "92", "150"],
            "answer": "118",
        },
        {
            "question": "<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∫–ª–µ—Ç–∫–∏?</b>",
            "options": ["–Ø–¥—Ä–æ", "–¶–∏—Ç–æ–ø–ª–∞–∑–º–∞", "–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏—è"],
            "answer": "–¶–∏—Ç–æ–ø–ª–∞–∑–º–∞",
        },
        {
            "question": "<b>–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –ø–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω?</b>",
            "options": ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º–∏–Ω–≥", "–õ—É–∏ –ü–∞—Å—Ç–µ—Ä", "–ò–ª—å—è –ú–µ—á–Ω–∏–∫–æ–≤"],
            "answer": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º–∏–Ω–≥",
        },
        {
            "question": "<b>–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ 'Fe'?</b>",
            "options": ["–ó–æ–ª–æ—Ç–æ", "–ñ–µ–ª–µ–∑–æ", "–°–µ—Ä–µ–±—Ä–æ"],
            "answer": "–ñ–µ–ª–µ–∑–æ",
        },
    ],
    TOPICS[2]: [
        {
            "question": "<b>–ö—Ç–æ —Ä–µ–∂–∏—Å—Å–µ—Ä —Ñ–∏–ª—å–º–∞ '–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü'?</b>",
            "options": ["–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ", "–§—Ä—ç–Ω—Å–∏—Å –§–æ—Ä–¥ –ö–æ–ø–ø–æ–ª–∞", "–°—Ç–∏–≤–µ–Ω –°–ø–∏–ª–±–µ—Ä–≥"],
            "answer": "–§—Ä—ç–Ω—Å–∏—Å –§–æ—Ä–¥ –ö–æ–ø–ø–æ–ª–∞",
        },
        {
            "question": "<b>–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–≤–æ–≥–æ '–û—Å–∫–∞—Ä–∞'?</b>",
            "options": ["–£–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤–µ—Ç—Ä–æ–º", "–ö—Ä—ã–ª—å—è", "–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å"],
            "answer": "–ö—Ä—ã–ª—å—è",
        },
        {
            "question": "<b>–ö—Ç–æ –∏–≥—Ä–∞–ª –ù–µ–æ –≤ '–ú–∞—Ç—Ä–∏—Ü–µ'?</b>",
            "options": ["–ë—Ä—ç–¥ –ü–∏—Ç—Ç", "–ö–∏–∞–Ω—É –†–∏–≤–∑", "–¢–æ–º –ö—Ä—É–∑"],
            "answer": "–ö–∏–∞–Ω—É –†–∏–≤–∑",
        },
        {
            "question": "<b>–°–∫–æ–ª—å–∫–æ '–û—Å–∫–∞—Ä–æ–≤' –ø–æ–ª—É—á–∏–ª '–¢–∏—Ç–∞–Ω–∏–∫'?</b>",
            "options": ["5", "11", "3"],
            "answer": "11",
        },
        {
            "question": "<b>–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Å–∞–º—ã–π –∫–∞—Å—Å–æ–≤—ã–π –≤ –∏—Å—Ç–æ—Ä–∏–∏?</b>",
            "options": ["–ê–≤–∞—Ç–∞—Ä", "–ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª", "–¢–∏—Ç–∞–Ω–∏–∫"],
            "answer": "–ê–≤–∞—Ç–∞—Ä",
        },
    ],
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, UserData] = {}


def create_welcome_message() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b> üåü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\n\n"
        f"{TOPICS[0]} - –ø—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
        f"{TOPICS[1]} - –≤–æ–ø—Ä–æ—Å—ã –æ –º–∏—Ä–µ –≤–æ–∫—Ä—É–≥ –Ω–∞—Å\n"
        f"{TOPICS[2]} - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —ç—Ä—É–¥–∏—Ü–∏—é –≤ –∫–∏–Ω–æ–∏—Å–∫—É—Å—Å—Ç–≤–µ\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</b>"
    )


def create_quiz_start_message(topic: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    return (
        f"üìØ <b>–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ —Ç–µ–º–µ: {topic}</b> üìØ\n\n"
        f"–ë—É–¥–µ—Ç {QUESTIONS_PER_QUIZ} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
        "–í—ã–±–∏—Ä–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    )


def create_question_text(question_num: int, question: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞."""
    return (
        f"<b>–í–æ–ø—Ä–æ—Å {question_num}/{QUESTIONS_PER_QUIZ}</b>\n"
        f"{question}\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    )


def create_result_message(topic: str, score: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    return (
        f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b> üéâ\n\n"
        f"–¢–µ–º–∞: <i>{topic}</i>\n"
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{QUESTIONS_PER_QUIZ}</b>\n\n"
        f"{get_result_emoji(score)} {get_result_comment(score)}"
    )


def get_result_emoji(score: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    if score == QUESTIONS_PER_QUIZ:
        return "üèÜ"
    if score >= 3:
        return "üëç"
    return "üòï"


def get_result_comment(score: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    if score == QUESTIONS_PER_QUIZ:
        return "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç!"
    if score >= 3:
        return "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–Ω–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è."
    return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É –≤–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!"


@bot.message_handler(commands=['start'])
def start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(topic) for topic in QUIZ_DATA]
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        create_welcome_message(),
        reply_markup=markup,
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda message: message.text in QUIZ_DATA)
def start_quiz(message: types.Message) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ."""
    topic = message.text
    user_data[message.chat.id] = {
        "topic": topic,
        "score": 0,
        "current_question": 0,
    }

    bot.send_message(
        message.chat.id,
        create_quiz_start_message(topic),
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode='HTML'
    )

    ask_question(message.chat.id)


def ask_question(chat_id: int) -> None:
    """–ó–∞–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    user = user_data[chat_id]
    topic = user["topic"]
    question_data = QUIZ_DATA[topic][user["current_question"]]

    buttons = {
        option: {'callback_data': option}
        for option in question_data["options"]
    }
    markup = quick_markup(buttons, row_width=1)

    bot.send_message(
        chat_id,
        create_question_text(
            user["current_question"] + 1,
            question_data["question"]
        ),
        reply_markup=markup,
        parse_mode='HTML'
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)

    if not user:
        return

    topic = user["topic"]
    question_data = QUIZ_DATA[topic][user["current_question"]]

    if call.data == question_data["answer"]:
        user["score"] += 1
        feedback = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>"
    else:
        feedback = (
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <i>{question_data['answer']}</i>"
        )

    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, feedback, parse_mode='HTML')

    user["current_question"] += 1

    if user["current_question"] < QUESTIONS_PER_QUIZ:
        ask_question(chat_id)
    else:
        bot.send_message(
            chat_id,
            create_result_message(topic, user["score"]),
            parse_mode='HTML'
        )
        del user_data[chat_id]


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()